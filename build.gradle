import org.jetbrains.gradle.ext.Gradle

plugins {
	id 'java'
	id 'java-library'
	id 'maven-publish'
	id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
	id 'eclipse'
	id 'com.gtnewhorizons.retrofuturagradle' version '1.3.16'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(8))
		// Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
		vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
	}
	// Generate sources and javadocs jars when building and publishing
	withSourcesJar()
	// withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
	mcVersion = '1.12.2'

	// MCP Mappings
	mcpMappingChannel = 'stable'
	mcpMappingVersion = '39'

	// Set username here, the UUID will be looked up automatically
	username = 'Developer'

	// Add any additional tweaker classes here
	// extraTweakClasses.add('org.spongepowered.asm.launch.MixinTweaker')

	// Add various JVM arguments here for runtime
	def args = ["-ea:${project.group}"]
	args << '-Dfml.coreMods.load=' + coremod_plugin_class_name
	args << '-Dmixin.hotSwap=true'
	args << '-Dmixin.checks.interfaces=true'
	args << '-Dmixin.debug.export=true'
	extraRunJvmArguments.addAll(args)

	// Include and use dependencies' Access Transformer files
	useDependencyAccessTransformers = true

	// Add any properties you want to swap out for a dynamic value at build time here
	// Any properties here will be added to a class at build time, the name can be configured below
	injectedTags.put("VERSION", project.version)
	injectedTags.put("ID", project.archives_base_name)
}

// Generate a group.archives_base_name.Tags class
tasks.injectTags.configure {
	// Change Tags class' name here:
	outputClassName.set("${project.group}.${project.archives_base_name}.Tags")
}

repositories {
	maven {
		name 'CleanroomMC Maven'
		url 'https://maven.cleanroommc.com'
	}
	maven {
		name 'SpongePowered Maven'
		url 'https://repo.spongepowered.org/maven'
    }
	maven {
		name 'CurseMaven'
		url 'https://cursemaven.com'
		content {
			includeGroup 'curse.maven'
		}
	}
	mavenLocal() // Must be last for caching to work
}

dependencies {
	compileOnly 'org.jetbrains:annotations:24.0.1'
	implementation 'zone.rong:mixinbooter:8.3'

	String mixin = modUtils.enableMixins('org.spongepowered:mixin:0.8.3', "mixins.${project.archives_base_name}.refmap.json")
	api (mixin) {
		transitive = false
	}
	annotationProcessor('org.ow2.asm:asm-debug-all:5.2')
	annotationProcessor('com.google.guava:guava:24.1.1-jre')
	annotationProcessor('com.google.code.gson:gson:2.8.6')
	annotationProcessor(mixin) {
		transitive = false
	}

	implementation 'curse.maven:modularui-624243:4692437'
	//compile files('etc/modularui-2.0.2.jar') // for testing purpose
	compileOnly rfg.deobf('curse.maven:iron_chests-228756:2747935')
	compileOnly rfg.deobf('curse.maven:thermal_expansion-69163:2926431')
	compileOnly rfg.deobf('curse.maven:actually_additions-228404:3117927')
	compileOnly rfg.deobf('curse.maven:ender_storage_1_8-245174:2755787')
	compileOnly rfg.deobf('curse.maven:ae2_extended_life-570458:3811277')
	compileOnly rfg.deobf('curse.maven:ender_io-64578:3328811')
	compileOnly rfg.deobf('curse.maven:draconic_evolution-223565:3431261')
	compileOnly rfg.deobf('curse.maven:gregtech_ce_unofficial-557242:4325257')
	compileOnly rfg.deobf('curse.maven:future_mc-310059:3842790')
	compileOnly rfg.deobf('curse.maven:tinkers_construct-74072:2902483')
	compileOnly rfg.deobf('curse.maven:projecte-226410:2702991')
	compileOnly rfg.deobf('curse.maven:immersive_engineering-231951:2974106')
	compileOnly rfg.deobf('curse.maven:forestry-59751:2918418')
	compileOnly rfg.deobf('curse.maven:industrial_craft-242638:3838713')
	compileOnly rfg.deobf('curse.maven:metalchests-290145:2751488')
	compileOnly rfg.deobf('curse.maven:travelers_backpack-321117:3150850')
	compileOnly rfg.deobf('curse.maven:colossal_chests-237875:2718588')
	compileOnly rfg.deobf('curse.maven:cyclops_core-232758:3159497')
	compileOnly rfg.deobf('curse.maven:quark-243121:2924091')
	compileOnly rfg.deobf('curse.maven:cyclic-239286:3722420')
	compileOnly rfg.deobf('curse.maven:bibliocraft-228027:3647708')
	compileOnly rfg.deobf('curse.maven:railcraft-51195:2687757')
	compileOnly rfg.deobf('curse.maven:ic2_classic-242942:3093607')
	compileOnly rfg.deobf('curse.maven:energy_control-373450:3829524')
	compileOnly rfg.deobf('curse.maven:mrtjpcore-229002:2735197')
	compileOnly rfg.deobf('curse.maven:project_red_exploration-229049:2745551')
	compileOnly rfg.deobf('curse.maven:betweenlands-243363:3540287')
	compileOnly rfg.deobf('curse.maven:terrafirmacraft-302973:3645502')
	compileOnly rfg.deobf('curse.maven:galacticraft_legacy-564236:3919260')
	compileOnly rfg.deobf('curse.maven:rustic-256141:3107974')
	compileOnly rfg.deobf('curse.maven:charset_lib-284523:3656492')
	compileOnly rfg.deobf('curse.maven:charset_storage_chests-298584:3656498')
	compileOnly rfg.deobf('curse.maven:simply_backpacks-311595:3028832')
}

processResources {
	// This will ensure that this task is redone when the versions change
	inputs.property 'version', project.version
	inputs.property 'mcversion', project.minecraft.version

	// Replace various properties in mcmod.info and pack.mcmeta if applicable
	filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
		// Replace version and mcversion
		fcd.expand(
				'version': project.version,
				'mcversion': project.minecraft.version
		)
	}
}

jar {
	manifest {
		def attribute_map = [:]
		attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
		attribute_map['FMLCorePluginContainsFMLMod'] = true
		attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
		attributes(attribute_map)
	}
	// Add all embedded dependencies into the jar
	from(provider { configurations.embed.collect { it.isDirectory() ? it : zipTree(it) } })
}

idea {
	module {
		inheritOutputDirs = true
	}
	project {
		settings {
			runConfigurations {
				"1. Run Client"(Gradle) {
					taskNames = ["runClient"]
				}
				"2. Run Server"(Gradle) {
					taskNames = ["runServer"]
				}
				"3. Run Obfuscated Client"(Gradle) {
					taskNames = ["runObfClient"]
				}
				"4. Run Obfuscated Server"(Gradle) {
					taskNames = ["runObfServer"]
				}
			}
			compiler.javac {
				afterEvaluate {
					javacAdditionalOptions = "-encoding utf8"
					moduleJavacAdditionalOptions = [
							(project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
					]
				}
			}
		}
	}
}

tasks.named("processIdeaSettings").configure {
	dependsOn("injectTags")
}